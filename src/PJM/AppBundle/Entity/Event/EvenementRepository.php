<?php

namespace PJM\AppBundle\Entity\Event;

use Doctrine\ORM\EntityRepository;
use PJM\AppBundle\Entity\User;

/**
 * EvenementRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends EntityRepository
{
    public function getEvents(User $user, $max = 6, $quand = 'after', \DateTime $date = null, Evenement $eventExclure = null)
    {
        if ($date === null) {
            $date = new \DateTime();
        }

        $eventsPublics = $this->_getEvents(null, $max, $quand, $date, $eventExclure);
        $eventsPrives = $this->_getEvents($user, $max, $quand, $date, $eventExclure);

        $res = array_merge($eventsPublics, $eventsPrives);

        $reverse = ($quand == 'before');
        usort($res, function($a, $b) use($reverse)
        {
            if ($reverse) {
                return $a->getDateDebut() < $b->getDateDebut();
            }

            return $a->getDateDebut() > $b->getDateDebut();
        });

        if ($reverse) {
            $res = array_reverse($res);
        }

        return $res;
    }

    private function _getEvents(User $user = null, $max, $quand, \DateTime $date, Evenement $eventExclure = null)
    {
        $qb = $this->createQueryBuilder('e');

        if ($user === null) {
            $qb
                ->where('e.isPublic = true')
            ;
        } else {
            $qb
                ->innerJoin('e.invitations', 'i')
                ->where('e.isPublic = false')
                ->andWhere('i.invite = :user')
                ->setParameter('user', $user)
            ;
        }

        if ($eventExclure !== null) {
            $qb
                ->andWhere('e != :eventExclure')
                ->setParameter('eventExclure', $eventExclure)
            ;
        }

        if ($quand == 'after') {
            $qb
                ->andWhere('e.dateDebut > :date')
                ->orderBy('e.dateDebut', 'ASC')
            ;
        } elseif ($quand == 'before') {
            $qb
                ->andWhere('e.dateDebut <= :date')
                ->orderBy('e.dateDebut', 'DESC')
            ;
        }

        $qb->setParameter('date', $date);

        if ($max !== null) {
            $qb
                ->setMaxResults($max)
            ;
        }

        return $qb->getQuery()->getResult();
    }
}
