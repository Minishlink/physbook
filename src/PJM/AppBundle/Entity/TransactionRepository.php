<?php

namespace PJM\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use PJM\UserBundle\Entity\User;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
    public function findByUserAndBoquetteSlug(User $user, $boquetteSlug, $limit = null, $status = null)
    {
        $qb = $this->createQueryBuilder('t')
            ->where('t.user = :user')
            ->andWhere('t.status = \'OK\'')
            ->join('t.boquette', 'b', 'WITH', 'b.slug = :boquette_slug')
            ->setParameters(array(
                'user' => $user,
                'boquette_slug'  => $boquetteSlug
            ))
            ->orderBy('t.date', 'desc')
        ;

        if ($limit != null) {
            $qb->setMaxResults($limit);
        }

        if ($status != null) {
            $qb
                ->andWhere('t.status = :status')
                ->setParameter('status', $status)
            ;
        }

        return $qb->getQuery()->getResult();
    }

    public function findByBoquetteSlugAndValid($boquette_slug, $valid = "OK")
    {
        $status = $valid ? "OK" : "NOK";
        $query = $this->createQueryBuilder('t')
                    ->where('t.status = :status')
                    ->join('t.boquette', 'b', 'WITH', 'b.slug = :boquette_slug')
                    ->setParameters(array(
                        'boquette_slug'  => $boquette_slug,
                        'status' => $status
                    ))
                    ->orderBy('t.date', 'desc')
                    ->getQuery();

        try {
            $res = $query->getResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $res = null;
        }

        return $res;
    }

    public function callbackFindByBoquetteSlugAndValid($boquette_slug, $valid = "OK")
    {
        $status = $valid ? "OK" : "NOK";

        return function($qb) use($boquette_slug, $status) {
            $qb
                ->andWhere('Transaction.status = :status')
                ->join('Transaction.boquette', 'b', 'WITH', 'b.slug = :boquette_slug')
                ->setParameters(array(
                    'boquette_slug'  => $boquette_slug,
                    'status' => $status
                ))
            ;
        };
    }
}
